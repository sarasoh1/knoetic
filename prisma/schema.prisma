// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id
  email String
  firstName String
  lastName String
  userName String? @unique
  createdAt DateTime @default(now())
  createdForums Forum[]
  posts Post[]
  likes Like[]
  comments Comment[]
}

model Forum {
  id String @id @default(uuid())
  name String @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy User? @relation(fields: [createdByUserId], references: [id])
  createdByUserId String?
  posts Post[]
}

model Post {
  id String @id @default(uuid())
  title String
  textContent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User? @relation(fields: [authorId], references: [id])
  authorId String?
  forum Forum? @relation(fields: [forumName], references: [name], onDelete: Cascade)
  forumName String?
  likes Like[]
  comments Comment[]
}

model Like {
  id String @id @default(uuid())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation(fields: [authorId], references: [id])
  authorId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}